--- a/net/minecraft/world/level/storage/Convertable.java
+++ b/net/minecraft/world/level/storage/Convertable.java
@@ -68,6 +68,10 @@
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.world.level.dimension.WorldDimension;
+// CraftBukkit end
+
 public class Convertable {
 
     static final Logger LOGGER = LogUtils.getLogger();
@@ -114,7 +118,7 @@
     }
 
     private static WorldDataConfiguration readDataConfig(Dynamic<?> dynamic) {
-        DataResult dataresult = WorldDataConfiguration.CODEC.parse(dynamic);
+        DataResult<WorldDataConfiguration> dataresult = WorldDataConfiguration.CODEC.parse(dynamic); // CraftBukkit - decompile error
         Logger logger = Convertable.LOGGER;
 
         Objects.requireNonNull(logger);
@@ -252,6 +256,7 @@
             WorldDimensions.b worlddimensions_b = generatorsettings.dimensions().bake(iregistry);
             Lifecycle lifecycle1 = worlddimensions_b.lifecycle().add(lifecycle);
             WorldDataServer worlddataserver = WorldDataServer.parse(dynamic, datafixer, i, nbttagcompound2, worldsettings, levelversion, worlddimensions_b.specialWorldProperty(), generatorsettings.options(), lifecycle1);
+            worlddataserver.pdc = nbttagcompound1.get("BukkitValues"); // CraftBukkit - Add PDC to world
 
             return Pair.of(worlddataserver, worlddimensions_b);
         };
@@ -333,9 +338,23 @@
         return this.backupDir;
     }
 
-    public Convertable.ConversionSession createAccess(String s) throws IOException {
-        return new Convertable.ConversionSession(s);
+    // CraftBukkit start
+    public Convertable.ConversionSession createAccess(String s, ResourceKey<WorldDimension> dimensionType) throws IOException {
+        return new Convertable.ConversionSession(s, dimensionType);
+    }
+
+    public static Path getStorageFolder(Path path, ResourceKey<WorldDimension> dimensionType) {
+        if (dimensionType == WorldDimension.OVERWORLD) {
+            return path;
+        } else if (dimensionType == WorldDimension.NETHER) {
+            return path.resolve("DIM-1");
+        } else if (dimensionType == WorldDimension.END) {
+            return path.resolve("DIM1");
+        } else {
+            return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+        }
     }
+    // CraftBukkit end
 
     public static record a(List<Convertable.b> levels) implements Iterable<Convertable.b> {
 
@@ -388,8 +407,12 @@
         public final Convertable.b levelDirectory;
         private final String levelId;
         private final Map<SavedFile, Path> resources = Maps.newHashMap();
+        // CraftBukkit start
+        public final ResourceKey<WorldDimension> dimensionType;
 
-        public ConversionSession(String s) throws IOException {
+        public ConversionSession(String s, ResourceKey<WorldDimension> dimensionType) throws IOException {
+            this.dimensionType = dimensionType;
+            // CraftBukkit end
             this.levelId = s;
             this.levelDirectory = new Convertable.b(Convertable.this.baseDir.resolve(s));
             this.lock = SessionLock.create(this.levelDirectory.path());
@@ -400,7 +423,7 @@
         }
 
         public Path getLevelPath(SavedFile savedfile) {
-            Map map = this.resources;
+            Map<SavedFile, Path> map = this.resources; // CraftBukkit - decompile error
             Convertable.b convertable_b = this.levelDirectory;
 
             Objects.requireNonNull(this.levelDirectory);
@@ -408,7 +431,7 @@
         }
 
         public Path getDimensionPath(ResourceKey<World> resourcekey) {
-            return DimensionManager.getStorageFolder(resourcekey, this.levelDirectory.path());
+            return getStorageFolder(this.levelDirectory.path(), this.dimensionType); // CraftBukkit
         }
 
         private void checkLock() {
